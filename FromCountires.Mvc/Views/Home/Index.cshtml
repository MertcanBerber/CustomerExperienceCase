@model List<FromRestCountries.Models.Root>
@using System.Text.Json
@{
    ViewData["Title"] = "Country Population and Area Chart by Region";


    var groupedData = Model
        .GroupBy(country => country.Region)
        .ToDictionary(g => g.Key, g => g.ToList());

    var groupedDataJson = JsonSerializer.Serialize(groupedData);
    ViewData["GroupedCountryData"] = groupedDataJson;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <div id="selectors">
        <label for="regionSelect">Region:</label>
        <select id="regionSelect">
            @foreach (var region in Model.Select(c => c.Region).Distinct())
            {
                <option value="@region">@region</option>
            }
        </select>

        <label for="chartTypeSelect">Chart Type:</label>
        <select id="chartTypeSelect">
            <option value="line-population">Line - Population</option>
            <option value="line-area">Line - Area</option>
            <option value="bar-population">Bar - Population</option>
            <option value="bar-area">Bar - Area</option>
            <option value="doughnut-population">Doughnut - Population</option>
            <option value="doughnut-area">Doughnut - Area</option>
        </select>
    </div>

    <canvas id="countryChart"></canvas>

    <script>
        const groupedCountryData = @Html.Raw(ViewData["GroupedCountryData"]);

        let chart = null;

        const createChartConfig = (type, data, metric) => ({
            type: type,
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return tooltipItem.label + ': ' + tooltipItem.raw.toLocaleString() + (metric === 'area' ? ' km²' : '');
                            }
                        }
                    }
                }
            }
        });

        const updateChart = (region, type, metric) => {
            if (groupedCountryData[region]) {
                const regionData = groupedCountryData[region];
                const countryNames = regionData.map(country => country.Name);
                let values, label;

                if (metric === 'area') {
                    values = regionData.map(country => country.Area || 0);
                    label = 'Area (km²)';
                } else if (metric === 'population') {
                    values = regionData.map(country => country.Population || 0);
                    label = 'Population';
                }

                const data = {
                    labels: countryNames,
                    datasets: [{
                        label: label,
                        data: values,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                };

                if (chart) {
                    chart.destroy();
                }

                chart = new Chart(document.getElementById('countryChart').getContext('2d'), createChartConfig(type, data, metric));
            } else {
                console.error("Data for the selected region is not available: ", region);
            }
        };

        $(document).ready(function () {
            const initialRegion = $('#regionSelect option:first').val();
            $('#regionSelect').val(initialRegion);
            $('#chartTypeSelect').val('line-population');
            updateChart(initialRegion, 'line', 'population');
        });

        $('#regionSelect, #chartTypeSelect').change(function () {
            const selectedRegion = $('#regionSelect').val();
            const selectedValue = $('#chartTypeSelect').val();
            const [chartType, metric] = selectedValue.split('-');
            updateChart(selectedRegion, chartType, metric);
        });
    </script>
</body>
</html>
